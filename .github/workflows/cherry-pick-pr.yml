name: Cherry Pick Merged PR

on:
  pull_request_target:
    types:
      - closed
      - labeled

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  cherry-pick:
    if: ${{ github.event.pull_request.merged == true && (github.event.action == 'closed' || (github.event.action == 'labeled' && startsWith(github.event.label.name, 'cp_'))) }}
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0
          persist-credentials: true

      - name: Check if PR is from fork
        id: check_fork
        run: |
          IS_FORK="${{ github.event.pull_request.head.repo.full_name != github.repository }}"
          echo "is_fork=$IS_FORK" >> "$GITHUB_OUTPUT"
          echo "Fork status: $IS_FORK"
        shell: bash

      - name: Log trigger and PR information
        run: |
          echo "Trigger: ${{ github.event.action }}"
          if [ "${{ github.event.action }}" = "labeled" ]; then
            echo "Added label: ${{ github.event.label.name }}"
          fi
          echo "PR #${{ github.event.pull_request.number }} from: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Target repository: ${{ github.repository }}"
          echo "Is fork PR: ${{ steps.check_fork.outputs.is_fork }}"
          echo "PR merged: ${{ github.event.pull_request.merged }}"
        shell: bash

      - name: Get branch labels
        id: get_labels
        run: |
          LABELS=$(jq -r '.[].name' <<< '${{ toJSON(github.event.pull_request.labels) }}' | grep '^cp_' | paste -sd ',' || echo "")
          echo "filtered_labels_csv=$LABELS" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Fetch all branches
        run: git fetch --all
        shell: bash

      - name: Cherry-Pick and Create PRs
        if: ${{ steps.get_labels.outputs.filtered_labels_csv != '' }}
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_USER_LOGIN: ${{ github.event.pull_request.user.login }}
          LABEL_NAME: ${{ github.event.label.name }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          MERGE_SHA="${{ github.event.pull_request.merge_commit_sha }}"
          ORIG_URL="${{ github.event.pull_request.html_url }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          IFS=',' read -ra BRANCHES <<< "${{ steps.get_labels.outputs.filtered_labels_csv }}"
          for lbl in "${BRANCHES[@]}"; do
            TARGET=${lbl#cp_}
            
            # Create sanitized branch name from original branch name with timestamp for uniqueness
            printf -v ORIGINAL_BRANCH '%s' "${{ github.event.pull_request.head.ref }}"
            # Strip any word followed by '/' to ensure ticket numbers appear at the beginning
            CLEAN_BRANCH=$(printf '%s' "$ORIGINAL_BRANCH" | sed 's|^[^/]*/||g')
            SANITIZED_BRANCH=$(echo "$CLEAN_BRANCH" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            # Limit length to 35 chars to leave room for PR number and timestamp suffix
            SANITIZED_BRANCH=${SANITIZED_BRANCH:0:35}
            TIMESTAMP=$(date +%s)
            BRANCH="${SANITIZED_BRANCH}-cherry-pick-pr${PR_NUMBER}-${TIMESTAMP}"

            # Create branch
            if ! git checkout -b "$BRANCH" "origin/$TARGET"; then
              echo "::warning:: Branch $TARGET does not exist - skipping"
              continue
            fi

            # Cherry-pick
            git cherry-pick -m 1 "$MERGE_SHA" || CHERRY_PICK_EXIT_CODE=$?
            
            if [ ${CHERRY_PICK_EXIT_CODE:-0} -ne 0 ]; then
              # Check if this is an empty cherry-pick (changes already exist)
              if git status --porcelain | grep -q .; then
                # There are changes/conflicts - handle as conflict
                echo "::error:: Cherry-pick conflicts detected for PR #${PR_NUMBER} on branch ${TARGET}"

                # Create a conflict resolution branch
                CONFLICT_BRANCH="${BRANCH}-conflicts"

                # Add conflict markers and create a commit for manual resolution
                git add .
                git commit -m "Cherry-pick PR #${PR_NUMBER} with conflicts - manual resolution needed"

                # Push the conflict branch
                if git push --force-with-lease origin "$BRANCH:$CONFLICT_BRANCH"; then
                  # Create draft PR with conflict information
                  if ! gh pr list --head "$CONFLICT_BRANCH" --base "$TARGET" --state open | grep -q .; then
                    CONFLICT_TRIGGER_INFO=""
                    if [ "${{ github.event.action }}" = "labeled" ]; then
                      CONFLICT_TRIGGER_INFO="
                    **Trigger:** Label \`${LABEL_NAME}\` added to closed PR"
                    fi

                    gh pr create \
                      --base "$TARGET" \
                      --head "$CONFLICT_BRANCH" \
                      --title "üîß [CONFLICTS] Cherry-pick PR #${PR_NUMBER} ‚Üí ${TARGET}: ${PR_TITLE}" \
                      --body "‚ö†Ô∏è **Manual Resolution Required**

                    This cherry-pick of [#${PR_NUMBER}](${ORIG_URL}) to \`${TARGET}\` branch has conflicts that need manual resolution.

                    **Plugin-Specific Conflict Resolution:**
                    - **Version Conflicts**: Check plugin header version in main plugin file
                    - **Function Conflicts**: Resolve function name collisions in PHP files
                    - **Hook Conflicts**: Check for duplicate WordPress hook registrations

                    **Resolution Steps:**
                    1. Check out this branch: \`git checkout $CONFLICT_BRANCH\`
                    2. Resolve conflicts in the marked files
                    3. Stage resolved files: \`git add <resolved-files>\`
                    4. Amend the commit: \`git commit --amend\`
                    5. Push changes: \`git push --force-with-lease\`
                    6. Mark this PR as ready for review

                    **Automatic Validation:**
                    Once you push resolved changes, the following workflows will run automatically:
                    - Build validation (\`build.yml\`)
                    - PHP coding standards (\`php-coding-standards.yml\`)
                    - PHPUnit tests (\`phpunit.yml\`)
                    - JavaScript linting (\`js-ci.yml\`)
                    - Cherry-pick validation (\`cherry-pick-validation.yml\`)

                    **Original PR:** [#${PR_NUMBER}](${ORIG_URL})${CONFLICT_TRIGGER_INFO}" \
                      --draft

                    echo "::notice:: Created draft PR for manual conflict resolution: $CONFLICT_BRANCH"
                  else
                    echo "::notice:: Draft PR already exists for conflict resolution: $CONFLICT_BRANCH"
                  fi
                else
                  echo "::warning:: Failed to push conflict branch $CONFLICT_BRANCH"
                  git cherry-pick --abort
                fi
                continue
              else
                # Empty cherry-pick - changes already exist on target branch
                echo "::notice:: Cherry-pick is empty for PR #${PR_NUMBER} on branch ${TARGET} - changes already exist"
                git cherry-pick --abort
                
                # Check if a PR already exists for this cherry-pick
                if gh pr list --head "$BRANCH" --base "$TARGET" --state all | grep -q .; then
                  echo "::notice:: PR already exists for this cherry-pick, skipping creation"
                else
                  # Create an informational PR that can be immediately closed
                  SKIP_TRIGGER_INFO=""
                  if [ "${{ github.event.action }}" = "labeled" ]; then
                    SKIP_TRIGGER_INFO="
                  **Trigger:** Label \`${LABEL_NAME}\` added to closed PR"
                  fi

                  # Force push an empty branch so we can create a PR
                  git commit --allow-empty -m "Empty cherry-pick - changes already exist on ${TARGET}"
                  git push --force-with-lease origin "$BRANCH"

                  gh pr create \
                    --base "$TARGET" \
                    --head "$BRANCH" \
                    --title "‚ÑπÔ∏è [SKIPPED] Cherry-pick PR #${PR_NUMBER} ‚Üí ${TARGET}: ${PR_TITLE}" \
                    --body "**Changes Already Present**

                  The changes from [#${PR_NUMBER}](${ORIG_URL}) already exist on the \`${TARGET}\` branch.

                  **Possible Reasons:**
                  - Changes were already manually cherry-picked
                  - Changes were included in a previous merge
                  - PR was originally created from this branch

                  **Status:** ‚úÖ No action needed - changes are already present on target branch${SKIP_TRIGGER_INFO}

                  **Original PR:** [#${PR_NUMBER}](${ORIG_URL})"

                  # Immediately close the PR since no action is needed
                  gh pr close "$BRANCH" --comment "Auto-closing: Changes already exist on target branch"
                  echo "::notice:: Created and closed informational PR for empty cherry-pick: $BRANCH"
                fi
                continue
              fi
            else
              echo "Cherry-pick successful"
            fi

            # Push (force push to handle existing branches)
            if ! git push --force-with-lease origin "$BRANCH"; then
              echo "::error:: Failed to push branch $BRANCH"
              exit 1
            fi

            # Create PR via gh CLI (token already in env: GH_TOKEN)
            # Check if PR already exists
            if gh pr list --head "$BRANCH" --base "$TARGET" --state open | grep -q .; then
              echo "PR already exists for branch $BRANCH -> $TARGET, skipping creation"
            else
              TRIGGER_INFO=""
              if [ "${{ github.event.action }}" = "labeled" ]; then
                TRIGGER_INFO="
                **Trigger:** Label \`${LABEL_NAME}\` added to closed PR"
              fi

              # Extract tickets and add to title for Jira compatibility
              PR_TICKETS=$(echo "$PR_TITLE" | grep -o '\[[A-Z]\{2,\}-[0-9]\+\]' | tr '\n' ' ' | sed 's/[[:space:]]*$//')
              
              # Create title with tickets at the end
              if [ -n "$PR_TICKETS" ]; then
                CHERRY_PICK_TITLE="$PR_TITLE (üçí CP #${PR_NUMBER}‚Üí${TARGET}) ${PR_TICKETS}"
              else
                CHERRY_PICK_TITLE="$PR_TITLE (üçí CP #${PR_NUMBER}‚Üí${TARGET})"
              fi

              gh pr create \
                --base "$TARGET" \
                --head "$BRANCH" \
                --title "$CHERRY_PICK_TITLE" \
                --body "Automatic cherry-pick of [#${PR_NUMBER}](${ORIG_URL}) to \`${TARGET}\` branch.

                **Plugin Information:**
                - **Plugin:** Hello Plus
                - **Source:** ${{ github.event.pull_request.head.repo.full_name }}
                - **Original Author:** @${PR_USER_LOGIN}${TRIGGER_INFO}

                **Automatic Validation:**
                The following workflows will run automatically to validate this cherry-pick:
                - üèóÔ∏è **Build validation** (\`build.yml\`) - Plugin compilation and asset building
                - üß™ **PHPUnit tests** (\`phpunit.yml\`) - Automated testing suite
                - üîç **PHP coding standards** (\`php-coding-standards.yml\`) - Code quality checks
                - üßπ **JavaScript linting** (\`js-ci.yml\`) - Frontend code validation
                - ‚úÖ **Cherry-pick validation** (\`cherry-pick-validation.yml\`) - Plugin-specific validation

                **Next Steps:**
                - Wait for validation workflows to complete
                - Review automated validation results
                - Test plugin functionality if needed
                - Merge when all checks pass

                **Note:** Build and validation happen automatically via PR workflows, following the same process as regular PRs."
            fi
          done
        shell: bash 